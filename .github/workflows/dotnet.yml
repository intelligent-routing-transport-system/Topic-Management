name: .NET

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Publish
      run: dotnet publish -o ./dist
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AWS_REPOSITORY_NAME }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        aws ecs update-service --cluster ecs-tcc-apis --service ecs-service-topic-manager --task-definition task-topic-manager:7

  #     Copiar arquivos do build para a EC2 da AWS
  #     - name: Copy files to AWS EC2
#       uses: appleboy/scp-action@master
#       with:
#         host: ${{ secrets.SSH_HOST }}
#         username: ${{ secrets.SSH_USER }}
#         key: ${{ secrets.SSH_KEY }}
#         port: ${{ secrets.SSH_PORT }}
#         source: ".,!Topic-Manager"
#         target: "~/api/api-topic-manager"
        
#       # Instalar as dependencias no servidor e reiniciar
#     - name: Install depencies on AWS EC2 and restart service
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.SSH_HOST }}
#         username: ${{ secrets.SSH_USER }}
#         key: ${{ secrets.SSH_KEY }}
#         port: ${{ secrets.SSH_PORT }}
#         script: |
#           cd api/api-topic-manager
#           sudo docker stop topic-manager
#           sudo docker rm topic-manager
#           sudo docker build -t topicmanager:1.0 .
#           sudo docker container run -p 5000:80 --name topic-manager -d topicmanager:1.0
